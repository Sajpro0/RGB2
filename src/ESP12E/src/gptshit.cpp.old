#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>

// --- Dummy definitions for missing macros and header files ---

// Datastore entry IDs (replace with your own if needed)
#ifndef ENTRY_SSID
#define ENTRY_SSID 1
#endif
#ifndef ENTRY_SSIDPASS
#define ENTRY_SSIDPASS 2
#endif
#ifndef ENTRY_DEVID
#define ENTRY_DEVID 3
#endif
#ifndef ENTRY_DEVNAME
#define ENTRY_DEVNAME 4
#endif
#ifndef ENTRY_FEATURES
#define ENTRY_FEATURES 5
#endif
#ifndef ENTRY_ENTRYARRAY
#define ENTRY_ENTRYARRAY 6
#endif

// Protocol and command definitions
#ifndef UDP_LISTEN_PORT
#define UDP_LISTEN_PORT 12345
#endif
#ifndef PROTO_SIG
#define PROTO_SIG 0xAA
#endif
#ifndef COMMAND_PING
#define COMMAND_PING 1
#endif
#ifndef COMMAND_RGBV
#define COMMAND_RGBV 2
#endif
#ifndef REPLY_RESPONSE
#define REPLY_RESPONSE 0x10
#endif
#ifndef REPLY_ERROR
#define REPLY_ERROR 0x11
#endif
#ifndef ERROR_COMMANDINVALID
#define ERROR_COMMANDINVALID 0xE1
#endif
#ifndef ERROR_NOTIMPLEMENTED_COMMAND
#define ERROR_NOTIMPLEMENTED_COMMAND 0xE2
#endif

#pragma region SETTINGS
#define DEBUG_EN
#pragma endregion

// --- End dummy definitions ---

// Forward declaration
class DataEntry;

class RPCBinder {
  public:
    void* (*get)(DataEntry&);
    uint8_t (*set)(DataEntry&, void *);
};

class DataEntry {
  public:
    union idUni {
      uint8_t u8;
      uint16_t u16 = 0;
    };

    idUni id;

    DataEntry() { }

    DataEntry(uint16_t id, int type, void * value) {
      this->id.u16 = id;
      this->type = (uint8_t)type | typeExtended;
      data.any = value;
    }

    DataEntry(uint8_t id, int type, void * value) {
      this->id.u8 = id;
      this->type = (uint8_t)type;
      data.any = value;
    }

    static const uint8_t 
      typePerm    = 0,           // the saved value will not be attempted to be read
      typeRW      = 1,           // the saved value will get changed when set is called
      typeTemp    = 2,           // treated same as RW but identified as temp so can be skipped when saving
      typeRPC     = 3,           // set and get methods are called when requested
      typeNone    = 0,           // initial value
      typeString  = 1 << 2,      // pick type.str
      typeBuf     = 2 << 2,      // pick type.buf
      typeNumber8 = 3 << 2,      // pick type.b8
      typeNumber16= 4 << 2,      // pick type.b16
      typeNumber32= 5 << 2,      // pick type.b32
      typeRegular = 0,           // stored in the regular datastore
      typeExtended= 1 << 7;      // stored in the extended datastore

    static const uint8_t DEFTYPE = DataEntry::typePerm | DataEntry::typeNone;
    
    uint8_t type = DEFTYPE;

    uint8_t storeType() {
      return type & 0b00000011;
    }
    uint8_t dataType() {
      return type & 0b01111100;
    }
    bool extended() {
      return type & 0b10000000;
    }
    void * get() {
      switch (dataType()) {
        case typeRPC: {
            RPCBinder& rpc = data.rpc;
            return rpc.get(*this);
          }
        break;
        case typeNone:
          return (void*)0;
        default:
          return data.any;
      }
    }
    uint8_t set(void * v) {
      uint8_t store = this->storeType();
      if (store == typeRPC) { // do not delete memory, handled by rpc
        return data.rpc.set(*this, v);
      }
      else if (store == typePerm) { // cannot set perm memory
        return 1;
      }
      else { // for rw or temp memory
        uint8_t dt = dataType();
        if (dt == typeString || dt == typeBuf) {
          delete[] (char*)data.any;
        }
        else if (dt == typeNumber32) {
          delete data.any;
        }
        data.any = v;
      }
      return 0;
    }
    union dataTypes {
      RPCBinder rpc;
      char * str;
      uint8_t * buf;
      uint8_t b8;
      uint16_t b16;
      uint32_t * b32;
      void * any;
    };
    dataTypes data;
};

class Datastore {
  public:
    DataEntry * entries = 0;
    int entryCnt = 0;
    // Return pointer to the entry with the given id (8-bit query)
    DataEntry * get(uint8_t id) {
      for (int i = 0; i < entryCnt; i++) {
        DataEntry& entry = entries[i];
        uint8_t extended = (entry.type >> 7) & 1;
        if (extended || entry.id.u8 != id)
          continue;
        return &entry;
      }
      return 0;
    }
    // Return pointer to the entry with the given id (extended 16-bit query)
    DataEntry * get(uint16_t id) {
      for (int i = 0; i < entryCnt; i++) {
        DataEntry& entry = entries[i];
        uint8_t extended = entry.type >> 7;
        if (!extended || entry.id.u16 != id)
          continue;
        return &entry;
      }
      return 0;
    }
};

Datastore Store;

void setup_debug() {
  Serial.println("Debug: setup_debug called");
}

char * create_id() {
  const char* prefix = "ESP-12E_RGB2_";
  const char* chars = "0123456789ABCDEF";
  int preflen = strlen(prefix);
  char * buf = new char[preflen + 2 * 3 + 1];
  memcpy(buf, prefix, preflen);
  uint8_t macBuf[6];
  WiFi.macAddress(macBuf);
  char * bufPtr = buf + preflen;
  uint8_t * macPtr = macBuf + 3;
  for (int i = 0; i < 3; i++) {
    *bufPtr     = chars[(*macPtr >> 4) & 0xF];
    bufPtr++;
    *bufPtr     = chars[*macPtr & 0xF];
    bufPtr++;
    macPtr++;
  }
  *bufPtr = 0; // Null terminate
  return buf;
}

String bits(uint8_t v) {
  static char str[9];
  for (int i = 0; i < 8; i++) {
    str[i] = (v >> (7 - i) & 1) ? '1' : '0';
  }
  str[8] = 0;
  return String(str);
}

// Dummy includes for user files (replace with actual files if available)
#include "entries.h"     // Define your datastore entry IDs here
#include "preset.h"      // Define your preset values here
#include "my_settings.h" // Additional settings if any

// Define WiFi credentials (for test purposes)
#define WIFI_SSID "SSID HERE"
#define WIFI_PASS "PASS HERE"

// This enumeration function prints or packs the IDs of all entries.
int enum_entires(uint8_t* buf) {
  int bytesWritten = 0;
  for (int i = 1; i <= 253; i++) {
    DataEntry * entry = Store.get((uint8_t)i);
    if (entry) {
      bytesWritten++;
      if (buf) {
        *buf = (uint8_t)i;
        buf++;
      }
      else {
        Serial.println("at " + String(i) + ": 0b" + bits(entry->type));
      }
    }
  }
  bool foundExtended = false;
  for (int i = 1; i <= 0xFFFF; i++) {
    DataEntry * entry = Store.get((uint16_t)i);
    if (entry) {
      if (buf) {
        if (!foundExtended) {
          bytesWritten++;
          foundExtended = true;
          *buf = 254;
          buf++;
        }
        bytesWritten += 2;
        *buf = ((uint16_t)i >> 8) & 0xFF;
        buf++;
        *buf = ((uint16_t)i) & 0xFF;
        buf++;
      }
      else {
        if (!foundExtended) {
          bytesWritten++;
          foundExtended = true;
          Serial.println("ext:");
        }
        bytesWritten += 2;
        Serial.println("at " + String(i) + ": 0b" + bits(entry->type));
      }
    }
  }
  if (!buf)
    Serial.println("Enumeration done");
  return bytesWritten;
}

void setup_datastore() {
  Serial.println("Setting up datastore...");
  constexpr int count = 8;
  DataEntry * entries = new DataEntry[count];
  Store.entries = entries;
  Store.entryCnt = count;
  entries[0] = DataEntry(ENTRY_SSID, DataEntry::typeString | DataEntry::typeRW, strdup((String("0") + WIFI_SSID).c_str()));
  entries[1] = DataEntry(ENTRY_SSIDPASS, DataEntry::typeString | DataEntry::typeRW, strdup((String("0") + WIFI_PASS).c_str()));
  entries[2] = DataEntry(ENTRY_DEVID, DataEntry::typePerm | DataEntry::typeString, create_id());
  entries[3] = DataEntry(ENTRY_DEVNAME, DataEntry::typeRW | DataEntry::typeString, strdup(entries[2].data.str));
  entries[count - 2] = DataEntry(ENTRY_FEATURES, DataEntry::typePerm | DataEntry::typeString, (char*)"wifi");

  int len = enum_entires(0);
  uint8_t * buf = new uint8_t[len];
  enum_entires(buf);
  entries[count - 1] = DataEntry(ENTRY_ENTRYARRAY, DataEntry::typePerm | DataEntry::typeBuf, (void*)buf);
  Serial.println();
  Serial.println("Enumeration run 2");
  enum_entires(0);
}

void init_loop();

uint8_t local_ip[4];

void setup_network() {
  WiFi.setSleepMode(WIFI_NONE_SLEEP);
  WiFi.mode(WIFI_STA);
  char * ssid = (char*)Store.get(ENTRY_SSID)->get();
  char * pass = (char*)Store.get(ENTRY_SSIDPASS)->get();
  char * host = (char*)Store.get(ENTRY_DEVNAME)->get();
  Serial.println("WiFi...");
  Serial.println("host: " + String(host));
  Serial.println("ssid: " + String(ssid + 1));
  Serial.print("pass: ");
  int passlen = strlen(pass);
  for (int i = 1; i < passlen; i++) {
    Serial.print('*');
  }
  Serial.println();
  Serial.flush();
  WiFi.setHostname(host);
  WiFi.begin(ssid + 1, pass + 1);
  Serial.print("      ...");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(2000);
    yield(); // Allow background tasks
  }
  Serial.println("Connected");
  uint32_t ipv4ip = WiFi.localIP();
  memcpy(local_ip, (uint8_t*)&ipv4ip, 4);
  Serial.println(String("ip: ") + local_ip[0] + "." + local_ip[1] + "." + local_ip[2] + "." + local_ip[3]);
  Serial.flush();
}

// --- Command and Reply classes ---

class Command {
  public:
    uint8_t A,    // the "A" bit
            ack,  // ack bit
            cmd,  // command bits
            len;  // length of buf
    uint8_t * buf;  // packet (without protocol signature)

    Command(uint8_t * buf, uint8_t len) {
      this->len = len;
      this->buf = buf;
      A = *buf & 0b10000000;
      ack = *buf & 0b01000000;
      cmd = *buf & 0b00001111;
    }
};

class Reply {
  public:
    uint8_t len;      // reply length
    uint8_t * buf;    // reply buffer

    Reply(uint8_t * buf, uint8_t len) {
      this->len = len;
      this->buf = buf;
    }

    // Set or clear the A bit.
    void setA(bool v) {
      if (v)
        *buf |= 0b10000000;
      else
        *buf &= ~0b10000000;
    }
    // Get the current A bit.
    uint8_t getA() {
      return *buf & 0b10000000;
    }
};

constexpr uint8_t replMaxLen = 128; // Maximum reply buffer size

// --- Connection class definition ---

class Connection {
  public:
    uint32_t ctlId;   // Unique identifier for the connection
    uint8_t A;        // Current value of the "A" bit
    Reply * repl;     // Pointer to the connection's current reply
    IPAddress replyIP; // IP to reply to
    uint16_t replyPort; // Reply port
    bool hasValidRepl;  // Flag for valid reply
    unsigned long priority; // For connection replacement priority

    Connection() {
      // Allocate a reply buffer so that repl is never null.
      repl = new Reply(new uint8_t[replMaxLen], replMaxLen);
      reset();
    }

    void reset() {
      ctlId = 0;
      A = 0b10000000;
      hasValidRepl = false;
      repl->len = replMaxLen;
      priority = millis();
    }

    // Returns false if the acked command is a retransmission.
    bool respond_to(Command& cmd) {
      if ((cmd.A && A) || (!cmd.A && !A))
        return false;
      return true;
    }
};

WiFiUDP udp;
constexpr uint8_t connectionCount = 4;
Connection conn[connectionCount];

// Setup the UDP connection.
void setup_connection() {
  udp.begin(UDP_LISTEN_PORT);
  // Global Connection objects already allocate their repl in the constructor.
}

// Helper function: convert IPAddress to uint32_t.
uint32_t ipToUint(const IPAddress &ip) {
  return ((uint32_t)ip[0] << 24) | ((uint32_t)ip[1] << 16) | ((uint32_t)ip[2] << 8) | (uint32_t)ip[3];
}

void setup() {
  Serial.begin(115200);
  delay(1000); // Small delay for stability
  Serial.println();
  Serial.println("start");
  Serial.flush();

  #ifdef DEBUG_EN
    setup_debug();
  #endif

  Serial.println("setup datastore");
  Serial.flush();
  setup_datastore();

  Serial.println("setup network");
  Serial.flush();
  setup_network();

  Serial.println("setup connection");
  Serial.flush();
  setup_connection();

  Serial.println("setup init");
  Serial.flush();
  init_loop();
}

// Currently, this function does nothing (reserved for future Ethernet use).
inline void discard_packet(WiFiUDP& c, int len) {
  constexpr int chunk = 128;
}

// Dummy functions for RGB and volume commands.
void do_v(uint8_t vol) { }
void do_rgb(uint8_t rgb[3]) { }
void do_rgbv(uint8_t rgbv[4]) {
  do_rgb(rgbv);
  do_v(rgbv[3]);
}

// Dummy includes for replies, errors, and commands (replace with real files if available)
#include "replies.h"
#include "errors.h"
#include "commands.h"

// Acknowledge receipt of a command.
void do_ack(Command& cmd, Reply& repl) {
  repl.setA(cmd.A);
  repl.buf[0] = REPLY_RESPONSE;
  repl.len = 1;
}

// Process the incoming packet. Returns true if a new reply was forged.
bool process_packet(Command& cmd, Reply& repl, Connection& con) {
  uint8_t payloadLen = cmd.len - 1;
  switch (cmd.cmd) {
    case COMMAND_PING: {
      constexpr uint32_t ping_const = 0x413A0D53;
      if (cmd.len == 5) {
        if (con.respond_to(cmd)) { // Check for retransmission
          if (cmd.ack) { // Forced ack
            do_ack(cmd, repl);
            return true;
          }
          else {
            uint32_t r_val = 0;
            memcpy((uint8_t*)&r_val, cmd.buf + 1, 4);
            r_val ^= ping_const;
            repl.setA(cmd.A);
            repl.buf[0] = REPLY_RESPONSE;
            memcpy(repl.buf + 1, (uint8_t*)&r_val, 4);
            repl.len = 5;
            return true;
          }
        }
      }
    } break;

    case COMMAND_RGBV: {
      if (payloadLen == 1) {
        do_v(cmd.buf[1]);
      }
      else if (payloadLen == 3) {
        do_rgb(cmd.buf + 1);
      }
      else if (payloadLen == 4) {
        do_rgbv(cmd.buf + 1);
      }
      else {
        if (cmd.ack && con.respond_to(cmd)) {
          repl.setA(cmd.A);
          repl.buf[0] = REPLY_ERROR;
          repl.buf[1] = ERROR_COMMANDINVALID;
          repl.len = 2;
          return true;
        }
      }
      if (cmd.ack && con.respond_to(cmd)) {
        do_ack(cmd, repl);
        return true;
      }
    } break;

    default: {
      if (cmd.ack && con.respond_to(cmd)) {
        repl.setA(cmd.A);
        repl.buf[0] = REPLY_ERROR;
        repl.buf[1] = ERROR_NOTIMPLEMENTED_COMMAND;
        repl.len = 2;
        return true;
      }
    } break;
  }
  return false;
}

// Returns the connection for the given packet id. If not found, uses a low‐priority connection.
Connection& get_connection(uint32_t ctlId) {
  Connection& to_replace = conn[0];
  if (to_replace.ctlId == ctlId)
    return to_replace;
  for (int i = 1; i < connectionCount; i++) {
    Connection& current = conn[i];
    if (current.ctlId == ctlId)
      return current;
    if (to_replace.priority > current.priority)
      to_replace = current;
  }
  to_replace.reset();
  return to_replace;
}

bool loop_connection() {
  int bytes = udp.parsePacket();
  constexpr int maxBytes = 128;
  IPAddress remoteIP = udp.remoteIP();
  uint32_t ctlId = ipToUint(remoteIP);
  if (bytes && ctlId) { // Data is available and IP is valid
    if (bytes > maxBytes) {
      discard_packet(udp, bytes);
      return false;
    }
    uint8_t b = udp.read();
    bytes--;
    if (b != PROTO_SIG) {
      discard_packet(udp, bytes);
      return false;
    }
    else {
      if (bytes == 0)
        return false;
      uint8_t buf[bytes];
      udp.readBytes(buf, bytes);
      Command pkt(buf, bytes);
      Connection& c = get_connection(ctlId);
      if (process_packet(pkt, *c.repl, c)) {
        c.A = !c.A;
      }
      if (pkt.ack) {
        c.replyPort = udp.remotePort();
        if (udp.beginPacket(IPAddress(ctlId), c.replyPort)) {
          udp.write(PROTO_SIG);
          udp.write(c.repl->buf, c.repl->len);
          udp.endPacket();
        }
      }
    }
    return false;
  }
  return true;
}

bool do_filter() {
  // Implement additional filtering if needed.
  return true;
}

unsigned long lastFilterSleepTime = 0;
constexpr unsigned long filterInterval = 10;
bool loop_filters() {
  unsigned long time = millis();
  unsigned long elapsed = time - lastFilterSleepTime;
  bool okayToSleep = true;
  while (elapsed >= filterInterval) {
    if (!do_filter())
      okayToSleep = false;
    elapsed -= filterInterval;
  }
  lastFilterSleepTime += (time - lastFilterSleepTime) - elapsed;
  return okayToSleep;
}

void sleep_enter() {
  Serial.println("Entering sleep...");
  Serial.flush();
  WiFi.setSleepMode(WIFI_LIGHT_SLEEP);
}

void sleep_leave() {
  Serial.println("Leaving sleep...");
  Serial.flush();
  WiFi.setSleepMode(WIFI_NONE_SLEEP);
}

void sleep_poll() {
  delay(1000);
}

unsigned long loopSleepTime = 0;     // Time when the loop was last updated
unsigned long loopSleepTimeout = 5000; // Timeout before entering sleep
bool wasSleeping = false;

// Main loop: if no packets or filters are pending, the device enters light sleep.
void loop() {
  unsigned long time = millis();
  if (loop_connection() && loop_filters()) {
    if ((millis() - loopSleepTime) > loopSleepTimeout) {
      if (!wasSleeping) {
        sleep_enter();
        wasSleeping = true;
      }
      sleep_poll();
    }
  }
  else {
    if (wasSleeping) {
      sleep_leave();
      wasSleeping = false;
    }
    loopSleepTime = time;
  }
}

void init_loop() {
  unsigned long time = millis();
  loopSleepTime = time;
  lastFilterSleepTime = time;
  Serial.println("Main loop running...");
  Serial.flush();
}
